#include "shader-library.hpp"

const char* SHADER_sun_frag = "#version 410 core\n"
"out vec4 FragColor;\n"
"void main() {\n"
"FragColor = vec4(1.0);\n"
"}";

const char* SHADER_default_vert = "\n"
"#version 410 core\n"
"layout (location = 0) in vec3 aPos;\n"
"layout (location = 1) in vec3 aNormal;\n"
"layout (location = 2) in vec2 aTexCoord;\n"
"out vec3 FragPos;\n"
"out vec3 Normal;\n"
"out vec2 TexCoord;\n"
"uniform mat4 model;\n"
"uniform mat4 view;\n"
"uniform mat4 projection;\n"
"void main()\n"
"{\n"
"FragPos = vec3(model * vec4(aPos, 1.0));\n"
"Normal = aNormal; \n"
"TexCoord = aTexCoord; \n"
"gl_Position = projection * view * vec4(FragPos, 1.0);\n"
"}";

const char* SHADER_tutorial_vert = "#version 410 core\n"
"layout (location = 0) in vec3 aPos;\n"
"layout (location = 1) in vec3 aNormal;\n"
"layout (location = 2) in vec2 aTexCoord;\n"
"out vec3 Normal;\n"
"out vec2 TexCoord;\n"
"uniform mat4 model;\n"
"uniform mat4 view;\n"
"uniform mat4 projection;\n"
"void main()\n"
"{\n"
"gl_Position = projection * view * model  * vec4(aPos, 1.0);\n"
"Normal = aNormal;\n"
"TexCoord = aTexCoord;\n"
"}";

const char* SHADER_tutorial_frag = "#version 410 core\n"
"out vec4 FragColor;\n"
"in vec3 ourColor;\n"
"in vec2 TexCoord;\n"
"uniform sampler2D texture0;\n"
"void main()\n"
"{\n"
"FragColor = vec4(1.0, 1.0, 1.0, 1.0); \n"
"}";

const char* SHADER_default_frag = "#version 410 core\n"
"out vec4 FragColor;\n"
"in vec3 Normal;  \n"
"in vec2 TexCoords;\n"
"in vec3 FragPos;  \n"
"struct DirectionalLight {\n"
"vec3 direction;\n"
"vec3 ambient;\n"
"vec3 diffuse;\n"
"vec3 specular;\n"
"};\n"
"struct PointLight {\n"
"vec3 position;\n"
"vec3 ambient;\n"
"vec3 diffuse;\n"
"vec3 specular;\n"
"float constant;\n"
"float linear;\n"
"float quadratic;\n"
"};\n"
"struct Material {\n"
"vec3 ambient;\n"
"vec3 diffuse;\n"
"vec3 specular;\n"
"float shininess;\n"
"};\n"
"uniform vec3 viewPos;\n"
"uniform DirectionalLight dirLight;\n"
"uniform PointLight pointLight;\n"
"uniform Material material;\n"
"float calculate_point_light_strength() {\n"
"float distance = length(pointLight.position - FragPos);\n"
"float attenuation = 1.0 / (pointLight.constant + pointLight.linear * distance + pointLight.quadratic * (distance * distance));\n"
"return attenuation;\n"
"}\n"
"void main()\n"
"{\n"
"vec3 ambient = dirLight.ambient *  material.ambient;\n"
"vec3 norm = normalize(Normal);\n"
"vec3 lightDir = normalize(-dirLight.direction);\n"
"float diff = max(dot(norm, lightDir), 0.0);\n"
"vec3 diffuse = dirLight.diffuse * (diff * material.diffuse);\n"
"vec3 viewDir = normalize(viewPos - FragPos);\n"
"vec3 reflectDir = reflect(-lightDir, norm);\n"
"float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);\n"
"vec3 specular = dirLight.specular * (spec * material.specular);  \n"
"vec3 result = ambient + diffuse;\n"
"FragColor = vec4(result, 1.0);\n"
"} ";

const char* SHADER_sun_vert = "#version 410 core\n"
"layout (location = 0) in vec3 position;\n"
"uniform mat4 model;\n"
"uniform mat4 view;\n"
"uniform mat4 projection;\n"
"void main()\n"
"{\n"
"gl_Position = projection * view * model * vec4(position, 1.0f);\n"
"}";

